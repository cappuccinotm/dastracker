// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package tracker

import (
	"context"
	"sync"

	"github.com/cappuccinotm/dastracker/app/store"
)

// Ensure, that InterfaceMock does implement Interface.
// If this is not the case, regenerate this file with moq.
var _ Interface = &InterfaceMock{}

// InterfaceMock is a mock implementation of Interface.
//
//     func TestSomethingThatUsesInterface(t *testing.T) {
//
//         // make and configure a mocked Interface
//         mockedInterface := &InterfaceMock{
//             CallFunc: func(ctx context.Context, req Request) (Response, error) {
// 	               panic("mock out the Call method")
//             },
//             CloseFunc: func(ctx context.Context) error {
// 	               panic("mock out the Close method")
//             },
//             NameFunc: func() string {
// 	               panic("mock out the Name method")
//             },
//             SubscribeFunc: func(ctx context.Context, vars store.Vars) (<-chan store.Update, error) {
// 	               panic("mock out the Subscribe method")
//             },
//         }
//
//         // use mockedInterface in code that requires Interface
//         // and then make assertions.
//
//     }
type InterfaceMock struct {
	// CallFunc mocks the Call method.
	CallFunc func(ctx context.Context, req Request) (Response, error)

	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// NameFunc mocks the Name method.
	NameFunc func() string

	// SubscribeFunc mocks the Subscribe method.
	SubscribeFunc func(ctx context.Context, vars store.Vars) (<-chan store.Update, error)

	// calls tracks calls to the methods.
	calls struct {
		// Call holds details about calls to the Call method.
		Call []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req Request
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Name holds details about calls to the Name method.
		Name []struct {
		}
		// Subscribe holds details about calls to the Subscribe method.
		Subscribe []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Vars is the vars argument value.
			Vars store.Vars
		}
	}
	lockCall      sync.RWMutex
	lockClose     sync.RWMutex
	lockName      sync.RWMutex
	lockSubscribe sync.RWMutex
}

// Call calls CallFunc.
func (mock *InterfaceMock) Call(ctx context.Context, req Request) (Response, error) {
	if mock.CallFunc == nil {
		panic("InterfaceMock.CallFunc: method is nil but Interface.Call was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req Request
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockCall.Lock()
	mock.calls.Call = append(mock.calls.Call, callInfo)
	mock.lockCall.Unlock()
	return mock.CallFunc(ctx, req)
}

// CallCalls gets all the calls that were made to Call.
// Check the length with:
//     len(mockedInterface.CallCalls())
func (mock *InterfaceMock) CallCalls() []struct {
	Ctx context.Context
	Req Request
} {
	var calls []struct {
		Ctx context.Context
		Req Request
	}
	mock.lockCall.RLock()
	calls = mock.calls.Call
	mock.lockCall.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *InterfaceMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("InterfaceMock.CloseFunc: method is nil but Interface.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedInterface.CloseCalls())
func (mock *InterfaceMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// Name calls NameFunc.
func (mock *InterfaceMock) Name() string {
	if mock.NameFunc == nil {
		panic("InterfaceMock.NameFunc: method is nil but Interface.Name was just called")
	}
	callInfo := struct {
	}{}
	mock.lockName.Lock()
	mock.calls.Name = append(mock.calls.Name, callInfo)
	mock.lockName.Unlock()
	return mock.NameFunc()
}

// NameCalls gets all the calls that were made to Name.
// Check the length with:
//     len(mockedInterface.NameCalls())
func (mock *InterfaceMock) NameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockName.RLock()
	calls = mock.calls.Name
	mock.lockName.RUnlock()
	return calls
}

// Subscribe calls SubscribeFunc.
func (mock *InterfaceMock) Subscribe(ctx context.Context, vars store.Vars) (<-chan store.Update, error) {
	if mock.SubscribeFunc == nil {
		panic("InterfaceMock.SubscribeFunc: method is nil but Interface.Subscribe was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Vars store.Vars
	}{
		Ctx:  ctx,
		Vars: vars,
	}
	mock.lockSubscribe.Lock()
	mock.calls.Subscribe = append(mock.calls.Subscribe, callInfo)
	mock.lockSubscribe.Unlock()
	return mock.SubscribeFunc(ctx, vars)
}

// SubscribeCalls gets all the calls that were made to Subscribe.
// Check the length with:
//     len(mockedInterface.SubscribeCalls())
func (mock *InterfaceMock) SubscribeCalls() []struct {
	Ctx  context.Context
	Vars store.Vars
} {
	var calls []struct {
		Ctx  context.Context
		Vars store.Vars
	}
	mock.lockSubscribe.RLock()
	calls = mock.calls.Subscribe
	mock.lockSubscribe.RUnlock()
	return calls
}

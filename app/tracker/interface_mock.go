// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package tracker

import (
	"context"
	"net/http"
	"sync"
)

// Ensure, that InterfaceMock does implement Interface.
// If this is not the case, regenerate this file with moq.
var _ Interface = &InterfaceMock{}

// InterfaceMock is a mock implementation of Interface.
//
// 	func TestSomethingThatUsesInterface(t *testing.T) {
//
// 		// make and configure a mocked Interface
// 		mockedInterface := &InterfaceMock{
// 			CallFunc: func(ctx context.Context, req Request) (Response, error) {
// 				panic("mock out the Call method")
// 			},
// 			HandleWebhookFunc: func(w http.ResponseWriter, r *http.Request)  {
// 				panic("mock out the HandleWebhook method")
// 			},
// 			ListenFunc: func(ctx context.Context, h Handler) error {
// 				panic("mock out the Listen method")
// 			},
// 			NameFunc: func() string {
// 				panic("mock out the Name method")
// 			},
// 			SubscribeFunc: func(ctx context.Context, req SubscribeReq) (SubscribeResp, error) {
// 				panic("mock out the Subscribe method")
// 			},
// 			UnsubscribeFunc: func(ctx context.Context, req UnsubscribeReq) error {
// 				panic("mock out the Unsubscribe method")
// 			},
// 		}
//
// 		// use mockedInterface in code that requires Interface
// 		// and then make assertions.
//
// 	}
type InterfaceMock struct {
	// CallFunc mocks the Call method.
	CallFunc func(ctx context.Context, req Request) (Response, error)

	// HandleWebhookFunc mocks the HandleWebhook method.
	HandleWebhookFunc func(w http.ResponseWriter, r *http.Request)

	// ListenFunc mocks the Listen method.
	ListenFunc func(ctx context.Context, h Handler) error

	// NameFunc mocks the Name method.
	NameFunc func() string

	// SubscribeFunc mocks the Subscribe method.
	SubscribeFunc func(ctx context.Context, req SubscribeReq) (SubscribeResp, error)

	// UnsubscribeFunc mocks the Unsubscribe method.
	UnsubscribeFunc func(ctx context.Context, req UnsubscribeReq) error

	// calls tracks calls to the methods.
	calls struct {
		// Call holds details about calls to the Call method.
		Call []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req Request
		}
		// HandleWebhook holds details about calls to the HandleWebhook method.
		HandleWebhook []struct {
			// W is the w argument value.
			W http.ResponseWriter
			// R is the r argument value.
			R *http.Request
		}
		// Listen holds details about calls to the Listen method.
		Listen []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// H is the h argument value.
			H Handler
		}
		// Name holds details about calls to the Name method.
		Name []struct {
		}
		// Subscribe holds details about calls to the Subscribe method.
		Subscribe []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req SubscribeReq
		}
		// Unsubscribe holds details about calls to the Unsubscribe method.
		Unsubscribe []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req UnsubscribeReq
		}
	}
	lockCall          sync.RWMutex
	lockHandleWebhook sync.RWMutex
	lockListen        sync.RWMutex
	lockName          sync.RWMutex
	lockSubscribe     sync.RWMutex
	lockUnsubscribe   sync.RWMutex
}

// Call calls CallFunc.
func (mock *InterfaceMock) Call(ctx context.Context, req Request) (Response, error) {
	if mock.CallFunc == nil {
		panic("InterfaceMock.CallFunc: method is nil but Interface.Call was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req Request
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockCall.Lock()
	mock.calls.Call = append(mock.calls.Call, callInfo)
	mock.lockCall.Unlock()
	return mock.CallFunc(ctx, req)
}

// CallCalls gets all the calls that were made to Call.
// Check the length with:
//     len(mockedInterface.CallCalls())
func (mock *InterfaceMock) CallCalls() []struct {
	Ctx context.Context
	Req Request
} {
	var calls []struct {
		Ctx context.Context
		Req Request
	}
	mock.lockCall.RLock()
	calls = mock.calls.Call
	mock.lockCall.RUnlock()
	return calls
}

// HandleWebhook calls HandleWebhookFunc.
func (mock *InterfaceMock) HandleWebhook(w http.ResponseWriter, r *http.Request) {
	if mock.HandleWebhookFunc == nil {
		panic("InterfaceMock.HandleWebhookFunc: method is nil but Interface.HandleWebhook was just called")
	}
	callInfo := struct {
		W http.ResponseWriter
		R *http.Request
	}{
		W: w,
		R: r,
	}
	mock.lockHandleWebhook.Lock()
	mock.calls.HandleWebhook = append(mock.calls.HandleWebhook, callInfo)
	mock.lockHandleWebhook.Unlock()
	mock.HandleWebhookFunc(w, r)
}

// HandleWebhookCalls gets all the calls that were made to HandleWebhook.
// Check the length with:
//     len(mockedInterface.HandleWebhookCalls())
func (mock *InterfaceMock) HandleWebhookCalls() []struct {
	W http.ResponseWriter
	R *http.Request
} {
	var calls []struct {
		W http.ResponseWriter
		R *http.Request
	}
	mock.lockHandleWebhook.RLock()
	calls = mock.calls.HandleWebhook
	mock.lockHandleWebhook.RUnlock()
	return calls
}

// Listen calls ListenFunc.
func (mock *InterfaceMock) Listen(ctx context.Context, h Handler) error {
	if mock.ListenFunc == nil {
		panic("InterfaceMock.ListenFunc: method is nil but Interface.Listen was just called")
	}
	callInfo := struct {
		Ctx context.Context
		H   Handler
	}{
		Ctx: ctx,
		H:   h,
	}
	mock.lockListen.Lock()
	mock.calls.Listen = append(mock.calls.Listen, callInfo)
	mock.lockListen.Unlock()
	return mock.ListenFunc(ctx, h)
}

// ListenCalls gets all the calls that were made to Listen.
// Check the length with:
//     len(mockedInterface.ListenCalls())
func (mock *InterfaceMock) ListenCalls() []struct {
	Ctx context.Context
	H   Handler
} {
	var calls []struct {
		Ctx context.Context
		H   Handler
	}
	mock.lockListen.RLock()
	calls = mock.calls.Listen
	mock.lockListen.RUnlock()
	return calls
}

// Name calls NameFunc.
func (mock *InterfaceMock) Name() string {
	if mock.NameFunc == nil {
		panic("InterfaceMock.NameFunc: method is nil but Interface.Name was just called")
	}
	callInfo := struct {
	}{}
	mock.lockName.Lock()
	mock.calls.Name = append(mock.calls.Name, callInfo)
	mock.lockName.Unlock()
	return mock.NameFunc()
}

// NameCalls gets all the calls that were made to Name.
// Check the length with:
//     len(mockedInterface.NameCalls())
func (mock *InterfaceMock) NameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockName.RLock()
	calls = mock.calls.Name
	mock.lockName.RUnlock()
	return calls
}

// Subscribe calls SubscribeFunc.
func (mock *InterfaceMock) Subscribe(ctx context.Context, req SubscribeReq) (SubscribeResp, error) {
	if mock.SubscribeFunc == nil {
		panic("InterfaceMock.SubscribeFunc: method is nil but Interface.Subscribe was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req SubscribeReq
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockSubscribe.Lock()
	mock.calls.Subscribe = append(mock.calls.Subscribe, callInfo)
	mock.lockSubscribe.Unlock()
	return mock.SubscribeFunc(ctx, req)
}

// SubscribeCalls gets all the calls that were made to Subscribe.
// Check the length with:
//     len(mockedInterface.SubscribeCalls())
func (mock *InterfaceMock) SubscribeCalls() []struct {
	Ctx context.Context
	Req SubscribeReq
} {
	var calls []struct {
		Ctx context.Context
		Req SubscribeReq
	}
	mock.lockSubscribe.RLock()
	calls = mock.calls.Subscribe
	mock.lockSubscribe.RUnlock()
	return calls
}

// Unsubscribe calls UnsubscribeFunc.
func (mock *InterfaceMock) Unsubscribe(ctx context.Context, req UnsubscribeReq) error {
	if mock.UnsubscribeFunc == nil {
		panic("InterfaceMock.UnsubscribeFunc: method is nil but Interface.Unsubscribe was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req UnsubscribeReq
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockUnsubscribe.Lock()
	mock.calls.Unsubscribe = append(mock.calls.Unsubscribe, callInfo)
	mock.lockUnsubscribe.Unlock()
	return mock.UnsubscribeFunc(ctx, req)
}

// UnsubscribeCalls gets all the calls that were made to Unsubscribe.
// Check the length with:
//     len(mockedInterface.UnsubscribeCalls())
func (mock *InterfaceMock) UnsubscribeCalls() []struct {
	Ctx context.Context
	Req UnsubscribeReq
} {
	var calls []struct {
		Ctx context.Context
		Req UnsubscribeReq
	}
	mock.lockUnsubscribe.RLock()
	calls = mock.calls.Unsubscribe
	mock.lockUnsubscribe.RUnlock()
	return calls
}

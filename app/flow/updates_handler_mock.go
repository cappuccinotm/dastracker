// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package flow

import (
	"context"
	"sync"

	"github.com/cappuccinotm/dastracker/app/store"
)

// Ensure, that updatesHandlerMock does implement updatesHandler.
// If this is not the case, regenerate this file with moq.
var _ updatesHandler = &updatesHandlerMock{}

// updatesHandlerMock is a mock implementation of updatesHandler.
//
//     func TestSomethingThatUsesupdatesHandler(t *testing.T) {
//
//         // make and configure a mocked updatesHandler
//         mockedupdatesHandler := &updatesHandlerMock{
//             HandleUpdateFunc: func(ctx context.Context, jobName string, upd store.Update) error {
// 	               panic("mock out the HandleUpdate method")
//             },
//         }
//
//         // use mockedupdatesHandler in code that requires updatesHandler
//         // and then make assertions.
//
//     }
type updatesHandlerMock struct {
	// HandleUpdateFunc mocks the HandleUpdate method.
	HandleUpdateFunc func(ctx context.Context, jobName string, upd store.Update) error

	// calls tracks calls to the methods.
	calls struct {
		// HandleUpdate holds details about calls to the HandleUpdate method.
		HandleUpdate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// JobName is the jobName argument value.
			JobName string
			// Upd is the upd argument value.
			Upd store.Update
		}
	}
	lockHandleUpdate sync.RWMutex
}

// HandleUpdate calls HandleUpdateFunc.
func (mock *updatesHandlerMock) HandleUpdate(ctx context.Context, jobName string, upd store.Update) error {
	if mock.HandleUpdateFunc == nil {
		panic("updatesHandlerMock.HandleUpdateFunc: method is nil but updatesHandler.HandleUpdate was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		JobName string
		Upd     store.Update
	}{
		Ctx:     ctx,
		JobName: jobName,
		Upd:     upd,
	}
	mock.lockHandleUpdate.Lock()
	mock.calls.HandleUpdate = append(mock.calls.HandleUpdate, callInfo)
	mock.lockHandleUpdate.Unlock()
	return mock.HandleUpdateFunc(ctx, jobName, upd)
}

// HandleUpdateCalls gets all the calls that were made to HandleUpdate.
// Check the length with:
//     len(mockedupdatesHandler.HandleUpdateCalls())
func (mock *updatesHandlerMock) HandleUpdateCalls() []struct {
	Ctx     context.Context
	JobName string
	Upd     store.Update
} {
	var calls []struct {
		Ctx     context.Context
		JobName string
		Upd     store.Update
	}
	mock.lockHandleUpdate.RLock()
	calls = mock.calls.HandleUpdate
	mock.lockHandleUpdate.RUnlock()
	return calls
}

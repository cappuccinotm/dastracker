// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package webhook

import (
	"context"
	"net/http"
	"sync"

	"github.com/cappuccinotm/dastracker/app/store"
)

// Ensure, that InterfaceMock does implement Interface.
// If this is not the case, regenerate this file with moq.
var _ Interface = &InterfaceMock{}

// InterfaceMock is a mock implementation of Interface.
//
//     func TestSomethingThatUsesInterface(t *testing.T) {
//
//         // make and configure a mocked Interface
//         mockedInterface := &InterfaceMock{
//             CreateFunc: func(ctx context.Context, tracker string, trigger string) (store.Webhook, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(ctx context.Context, webhookID string) error {
// 	               panic("mock out the Delete method")
//             },
//             ListFunc: func(ctx context.Context, tracker string) ([]store.Webhook, error) {
// 	               panic("mock out the List method")
//             },
//             ListenFunc: func(ctx context.Context) error {
// 	               panic("mock out the Listen method")
//             },
//             RegisterFunc: func(name string, handler http.Handler) error {
// 	               panic("mock out the Register method")
//             },
//             SetTrackerIDFunc: func(ctx context.Context, webhookID string, trackerID string) error {
// 	               panic("mock out the SetTrackerID method")
//             },
//         }
//
//         // use mockedInterface in code that requires Interface
//         // and then make assertions.
//
//     }
type InterfaceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, tracker string, trigger string) (store.Webhook, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, webhookID string) error

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, tracker string) ([]store.Webhook, error)

	// ListenFunc mocks the Listen method.
	ListenFunc func(ctx context.Context) error

	// RegisterFunc mocks the Register method.
	RegisterFunc func(name string, handler http.Handler) error

	// SetTrackerIDFunc mocks the SetTrackerID method.
	SetTrackerIDFunc func(ctx context.Context, webhookID string, trackerID string) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tracker is the tracker argument value.
			Tracker string
			// Trigger is the trigger argument value.
			Trigger string
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WebhookID is the webhookID argument value.
			WebhookID string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tracker is the tracker argument value.
			Tracker string
		}
		// Listen holds details about calls to the Listen method.
		Listen []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Register holds details about calls to the Register method.
		Register []struct {
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler http.Handler
		}
		// SetTrackerID holds details about calls to the SetTrackerID method.
		SetTrackerID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WebhookID is the webhookID argument value.
			WebhookID string
			// TrackerID is the trackerID argument value.
			TrackerID string
		}
	}
	lockCreate       sync.RWMutex
	lockDelete       sync.RWMutex
	lockList         sync.RWMutex
	lockListen       sync.RWMutex
	lockRegister     sync.RWMutex
	lockSetTrackerID sync.RWMutex
}

// Create calls CreateFunc.
func (mock *InterfaceMock) Create(ctx context.Context, tracker string, trigger string) (store.Webhook, error) {
	if mock.CreateFunc == nil {
		panic("InterfaceMock.CreateFunc: method is nil but Interface.Create was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Tracker string
		Trigger string
	}{
		Ctx:     ctx,
		Tracker: tracker,
		Trigger: trigger,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, tracker, trigger)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedInterface.CreateCalls())
func (mock *InterfaceMock) CreateCalls() []struct {
	Ctx     context.Context
	Tracker string
	Trigger string
} {
	var calls []struct {
		Ctx     context.Context
		Tracker string
		Trigger string
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *InterfaceMock) Delete(ctx context.Context, webhookID string) error {
	if mock.DeleteFunc == nil {
		panic("InterfaceMock.DeleteFunc: method is nil but Interface.Delete was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		WebhookID string
	}{
		Ctx:       ctx,
		WebhookID: webhookID,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, webhookID)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedInterface.DeleteCalls())
func (mock *InterfaceMock) DeleteCalls() []struct {
	Ctx       context.Context
	WebhookID string
} {
	var calls []struct {
		Ctx       context.Context
		WebhookID string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *InterfaceMock) List(ctx context.Context, tracker string) ([]store.Webhook, error) {
	if mock.ListFunc == nil {
		panic("InterfaceMock.ListFunc: method is nil but Interface.List was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Tracker string
	}{
		Ctx:     ctx,
		Tracker: tracker,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, tracker)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedInterface.ListCalls())
func (mock *InterfaceMock) ListCalls() []struct {
	Ctx     context.Context
	Tracker string
} {
	var calls []struct {
		Ctx     context.Context
		Tracker string
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Listen calls ListenFunc.
func (mock *InterfaceMock) Listen(ctx context.Context) error {
	if mock.ListenFunc == nil {
		panic("InterfaceMock.ListenFunc: method is nil but Interface.Listen was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListen.Lock()
	mock.calls.Listen = append(mock.calls.Listen, callInfo)
	mock.lockListen.Unlock()
	return mock.ListenFunc(ctx)
}

// ListenCalls gets all the calls that were made to Listen.
// Check the length with:
//     len(mockedInterface.ListenCalls())
func (mock *InterfaceMock) ListenCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockListen.RLock()
	calls = mock.calls.Listen
	mock.lockListen.RUnlock()
	return calls
}

// Register calls RegisterFunc.
func (mock *InterfaceMock) Register(name string, handler http.Handler) error {
	if mock.RegisterFunc == nil {
		panic("InterfaceMock.RegisterFunc: method is nil but Interface.Register was just called")
	}
	callInfo := struct {
		Name    string
		Handler http.Handler
	}{
		Name:    name,
		Handler: handler,
	}
	mock.lockRegister.Lock()
	mock.calls.Register = append(mock.calls.Register, callInfo)
	mock.lockRegister.Unlock()
	return mock.RegisterFunc(name, handler)
}

// RegisterCalls gets all the calls that were made to Register.
// Check the length with:
//     len(mockedInterface.RegisterCalls())
func (mock *InterfaceMock) RegisterCalls() []struct {
	Name    string
	Handler http.Handler
} {
	var calls []struct {
		Name    string
		Handler http.Handler
	}
	mock.lockRegister.RLock()
	calls = mock.calls.Register
	mock.lockRegister.RUnlock()
	return calls
}

// SetTrackerID calls SetTrackerIDFunc.
func (mock *InterfaceMock) SetTrackerID(ctx context.Context, webhookID string, trackerID string) error {
	if mock.SetTrackerIDFunc == nil {
		panic("InterfaceMock.SetTrackerIDFunc: method is nil but Interface.SetTrackerID was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		WebhookID string
		TrackerID string
	}{
		Ctx:       ctx,
		WebhookID: webhookID,
		TrackerID: trackerID,
	}
	mock.lockSetTrackerID.Lock()
	mock.calls.SetTrackerID = append(mock.calls.SetTrackerID, callInfo)
	mock.lockSetTrackerID.Unlock()
	return mock.SetTrackerIDFunc(ctx, webhookID, trackerID)
}

// SetTrackerIDCalls gets all the calls that were made to SetTrackerID.
// Check the length with:
//     len(mockedInterface.SetTrackerIDCalls())
func (mock *InterfaceMock) SetTrackerIDCalls() []struct {
	Ctx       context.Context
	WebhookID string
	TrackerID string
} {
	var calls []struct {
		Ctx       context.Context
		WebhookID string
		TrackerID string
	}
	mock.lockSetTrackerID.RLock()
	calls = mock.calls.SetTrackerID
	mock.lockSetTrackerID.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package engine

import (
	"context"
	"sync"

	"github.com/cappuccinotm/dastracker/app/store"
)

// Ensure, that SubscriptionsMock does implement Subscriptions.
// If this is not the case, regenerate this file with moq.
var _ Subscriptions = &SubscriptionsMock{}

// SubscriptionsMock is a mock implementation of Subscriptions.
//
// 	func TestSomethingThatUsesSubscriptions(t *testing.T) {
//
// 		// make and configure a mocked Subscriptions
// 		mockedSubscriptions := &SubscriptionsMock{
// 			CreateFunc: func(ctx context.Context, sub store.Subscription) (string, error) {
// 				panic("mock out the Create method")
// 			},
// 			DeleteFunc: func(ctx context.Context, subID string) error {
// 				panic("mock out the Delete method")
// 			},
// 			GetFunc: func(ctx context.Context, subID string) (store.Subscription, error) {
// 				panic("mock out the Get method")
// 			},
// 			ListFunc: func(ctx context.Context, trackerID string) ([]store.Subscription, error) {
// 				panic("mock out the List method")
// 			},
// 			UpdateFunc: func(ctx context.Context, sub store.Subscription) error {
// 				panic("mock out the Update method")
// 			},
// 		}
//
// 		// use mockedSubscriptions in code that requires Subscriptions
// 		// and then make assertions.
//
// 	}
type SubscriptionsMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, sub store.Subscription) (string, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, subID string) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, subID string) (store.Subscription, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, trackerID string) ([]store.Subscription, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, sub store.Subscription) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sub is the sub argument value.
			Sub store.Subscription
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SubID is the subID argument value.
			SubID string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SubID is the subID argument value.
			SubID string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TrackerID is the trackerID argument value.
			TrackerID string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sub is the sub argument value.
			Sub store.Subscription
		}
	}
	lockCreate sync.RWMutex
	lockDelete sync.RWMutex
	lockGet    sync.RWMutex
	lockList   sync.RWMutex
	lockUpdate sync.RWMutex
}

// Create calls CreateFunc.
func (mock *SubscriptionsMock) Create(ctx context.Context, sub store.Subscription) (string, error) {
	if mock.CreateFunc == nil {
		panic("SubscriptionsMock.CreateFunc: method is nil but Subscriptions.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sub store.Subscription
	}{
		Ctx: ctx,
		Sub: sub,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, sub)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedSubscriptions.CreateCalls())
func (mock *SubscriptionsMock) CreateCalls() []struct {
	Ctx context.Context
	Sub store.Subscription
} {
	var calls []struct {
		Ctx context.Context
		Sub store.Subscription
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *SubscriptionsMock) Delete(ctx context.Context, subID string) error {
	if mock.DeleteFunc == nil {
		panic("SubscriptionsMock.DeleteFunc: method is nil but Subscriptions.Delete was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		SubID string
	}{
		Ctx:   ctx,
		SubID: subID,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, subID)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedSubscriptions.DeleteCalls())
func (mock *SubscriptionsMock) DeleteCalls() []struct {
	Ctx   context.Context
	SubID string
} {
	var calls []struct {
		Ctx   context.Context
		SubID string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *SubscriptionsMock) Get(ctx context.Context, subID string) (store.Subscription, error) {
	if mock.GetFunc == nil {
		panic("SubscriptionsMock.GetFunc: method is nil but Subscriptions.Get was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		SubID string
	}{
		Ctx:   ctx,
		SubID: subID,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, subID)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedSubscriptions.GetCalls())
func (mock *SubscriptionsMock) GetCalls() []struct {
	Ctx   context.Context
	SubID string
} {
	var calls []struct {
		Ctx   context.Context
		SubID string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *SubscriptionsMock) List(ctx context.Context, trackerID string) ([]store.Subscription, error) {
	if mock.ListFunc == nil {
		panic("SubscriptionsMock.ListFunc: method is nil but Subscriptions.List was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		TrackerID string
	}{
		Ctx:       ctx,
		TrackerID: trackerID,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, trackerID)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedSubscriptions.ListCalls())
func (mock *SubscriptionsMock) ListCalls() []struct {
	Ctx       context.Context
	TrackerID string
} {
	var calls []struct {
		Ctx       context.Context
		TrackerID string
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *SubscriptionsMock) Update(ctx context.Context, sub store.Subscription) error {
	if mock.UpdateFunc == nil {
		panic("SubscriptionsMock.UpdateFunc: method is nil but Subscriptions.Update was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sub store.Subscription
	}{
		Ctx: ctx,
		Sub: sub,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, sub)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedSubscriptions.UpdateCalls())
func (mock *SubscriptionsMock) UpdateCalls() []struct {
	Ctx context.Context
	Sub store.Subscription
} {
	var calls []struct {
		Ctx context.Context
		Sub store.Subscription
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

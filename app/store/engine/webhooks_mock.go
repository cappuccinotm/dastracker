// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package engine

import (
	"context"
	"sync"

	"github.com/cappuccinotm/dastracker/app/store"
)

// Ensure, that WebhooksMock does implement Webhooks.
// If this is not the case, regenerate this file with moq.
var _ Webhooks = &WebhooksMock{}

// WebhooksMock is a mock implementation of Webhooks.
//
//     func TestSomethingThatUsesWebhooks(t *testing.T) {
//
//         // make and configure a mocked Webhooks
//         mockedWebhooks := &WebhooksMock{
//             CreateFunc: func(ctx context.Context, wh store.Webhook) (string, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(ctx context.Context, whID string) error {
// 	               panic("mock out the Delete method")
//             },
//             GetFunc: func(ctx context.Context, s string) (store.Webhook, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(ctx context.Context, trackerID string) ([]store.Webhook, error) {
// 	               panic("mock out the List method")
//             },
//             UpdateFunc: func(ctx context.Context, wh store.Webhook) error {
// 	               panic("mock out the Update method")
//             },
//         }
//
//         // use mockedWebhooks in code that requires Webhooks
//         // and then make assertions.
//
//     }
type WebhooksMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, wh store.Webhook) (string, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, whID string) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, s string) (store.Webhook, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, trackerID string) ([]store.Webhook, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, wh store.Webhook) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Wh is the wh argument value.
			Wh store.Webhook
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhID is the whID argument value.
			WhID string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// S is the s argument value.
			S string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TrackerID is the trackerID argument value.
			TrackerID string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Wh is the wh argument value.
			Wh store.Webhook
		}
	}
	lockCreate sync.RWMutex
	lockDelete sync.RWMutex
	lockGet    sync.RWMutex
	lockList   sync.RWMutex
	lockUpdate sync.RWMutex
}

// Create calls CreateFunc.
func (mock *WebhooksMock) Create(ctx context.Context, wh store.Webhook) (string, error) {
	if mock.CreateFunc == nil {
		panic("WebhooksMock.CreateFunc: method is nil but Webhooks.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Wh  store.Webhook
	}{
		Ctx: ctx,
		Wh:  wh,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, wh)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedWebhooks.CreateCalls())
func (mock *WebhooksMock) CreateCalls() []struct {
	Ctx context.Context
	Wh  store.Webhook
} {
	var calls []struct {
		Ctx context.Context
		Wh  store.Webhook
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *WebhooksMock) Delete(ctx context.Context, whID string) error {
	if mock.DeleteFunc == nil {
		panic("WebhooksMock.DeleteFunc: method is nil but Webhooks.Delete was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		WhID string
	}{
		Ctx:  ctx,
		WhID: whID,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, whID)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedWebhooks.DeleteCalls())
func (mock *WebhooksMock) DeleteCalls() []struct {
	Ctx  context.Context
	WhID string
} {
	var calls []struct {
		Ctx  context.Context
		WhID string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *WebhooksMock) Get(ctx context.Context, s string) (store.Webhook, error) {
	if mock.GetFunc == nil {
		panic("WebhooksMock.GetFunc: method is nil but Webhooks.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		S   string
	}{
		Ctx: ctx,
		S:   s,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, s)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedWebhooks.GetCalls())
func (mock *WebhooksMock) GetCalls() []struct {
	Ctx context.Context
	S   string
} {
	var calls []struct {
		Ctx context.Context
		S   string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *WebhooksMock) List(ctx context.Context, trackerID string) ([]store.Webhook, error) {
	if mock.ListFunc == nil {
		panic("WebhooksMock.ListFunc: method is nil but Webhooks.List was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		TrackerID string
	}{
		Ctx:       ctx,
		TrackerID: trackerID,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, trackerID)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedWebhooks.ListCalls())
func (mock *WebhooksMock) ListCalls() []struct {
	Ctx       context.Context
	TrackerID string
} {
	var calls []struct {
		Ctx       context.Context
		TrackerID string
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *WebhooksMock) Update(ctx context.Context, wh store.Webhook) error {
	if mock.UpdateFunc == nil {
		panic("WebhooksMock.UpdateFunc: method is nil but Webhooks.Update was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Wh  store.Webhook
	}{
		Ctx: ctx,
		Wh:  wh,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, wh)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedWebhooks.UpdateCalls())
func (mock *WebhooksMock) UpdateCalls() []struct {
	Ctx context.Context
	Wh  store.Webhook
} {
	var calls []struct {
		Ctx context.Context
		Wh  store.Webhook
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

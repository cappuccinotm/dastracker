// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package engine

import (
	"context"
	"sync"

	"github.com/cappuccinotm/dastracker/app/store"
)

// Ensure, that FlowMock does implement Flow.
// If this is not the case, regenerate this file with moq.
var _ Flow = &FlowMock{}

// FlowMock is a mock implementation of Flow.
//
// 	func TestSomethingThatUsesFlow(t *testing.T) {
//
// 		// make and configure a mocked Flow
// 		mockedFlow := &FlowMock{
// 			ListSubscribedJobsFunc: func(ctx context.Context, triggerName string) ([]store.Job, error) {
// 				panic("mock out the ListSubscribedJobs method")
// 			},
// 			ListTrackersFunc: func(contextMoqParam context.Context) ([]store.Tracker, error) {
// 				panic("mock out the ListTrackers method")
// 			},
// 			ListTriggersFunc: func(contextMoqParam context.Context) ([]store.Trigger, error) {
// 				panic("mock out the ListTriggers method")
// 			},
// 		}
//
// 		// use mockedFlow in code that requires Flow
// 		// and then make assertions.
//
// 	}
type FlowMock struct {
	// ListSubscribedJobsFunc mocks the ListSubscribedJobs method.
	ListSubscribedJobsFunc func(ctx context.Context, triggerName string) ([]store.Job, error)

	// ListTrackersFunc mocks the ListTrackers method.
	ListTrackersFunc func(contextMoqParam context.Context) ([]store.Tracker, error)

	// ListTriggersFunc mocks the ListTriggers method.
	ListTriggersFunc func(contextMoqParam context.Context) ([]store.Trigger, error)

	// calls tracks calls to the methods.
	calls struct {
		// ListSubscribedJobs holds details about calls to the ListSubscribedJobs method.
		ListSubscribedJobs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TriggerName is the triggerName argument value.
			TriggerName string
		}
		// ListTrackers holds details about calls to the ListTrackers method.
		ListTrackers []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// ListTriggers holds details about calls to the ListTriggers method.
		ListTriggers []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
	}
	lockListSubscribedJobs sync.RWMutex
	lockListTrackers       sync.RWMutex
	lockListTriggers       sync.RWMutex
}

// ListSubscribedJobs calls ListSubscribedJobsFunc.
func (mock *FlowMock) ListSubscribedJobs(ctx context.Context, triggerName string) ([]store.Job, error) {
	if mock.ListSubscribedJobsFunc == nil {
		panic("FlowMock.ListSubscribedJobsFunc: method is nil but Flow.ListSubscribedJobs was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		TriggerName string
	}{
		Ctx:         ctx,
		TriggerName: triggerName,
	}
	mock.lockListSubscribedJobs.Lock()
	mock.calls.ListSubscribedJobs = append(mock.calls.ListSubscribedJobs, callInfo)
	mock.lockListSubscribedJobs.Unlock()
	return mock.ListSubscribedJobsFunc(ctx, triggerName)
}

// ListSubscribedJobsCalls gets all the calls that were made to ListSubscribedJobs.
// Check the length with:
//     len(mockedFlow.ListSubscribedJobsCalls())
func (mock *FlowMock) ListSubscribedJobsCalls() []struct {
	Ctx         context.Context
	TriggerName string
} {
	var calls []struct {
		Ctx         context.Context
		TriggerName string
	}
	mock.lockListSubscribedJobs.RLock()
	calls = mock.calls.ListSubscribedJobs
	mock.lockListSubscribedJobs.RUnlock()
	return calls
}

// ListTrackers calls ListTrackersFunc.
func (mock *FlowMock) ListTrackers(contextMoqParam context.Context) ([]store.Tracker, error) {
	if mock.ListTrackersFunc == nil {
		panic("FlowMock.ListTrackersFunc: method is nil but Flow.ListTrackers was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockListTrackers.Lock()
	mock.calls.ListTrackers = append(mock.calls.ListTrackers, callInfo)
	mock.lockListTrackers.Unlock()
	return mock.ListTrackersFunc(contextMoqParam)
}

// ListTrackersCalls gets all the calls that were made to ListTrackers.
// Check the length with:
//     len(mockedFlow.ListTrackersCalls())
func (mock *FlowMock) ListTrackersCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockListTrackers.RLock()
	calls = mock.calls.ListTrackers
	mock.lockListTrackers.RUnlock()
	return calls
}

// ListTriggers calls ListTriggersFunc.
func (mock *FlowMock) ListTriggers(contextMoqParam context.Context) ([]store.Trigger, error) {
	if mock.ListTriggersFunc == nil {
		panic("FlowMock.ListTriggersFunc: method is nil but Flow.ListTriggers was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockListTriggers.Lock()
	mock.calls.ListTriggers = append(mock.calls.ListTriggers, callInfo)
	mock.lockListTriggers.Unlock()
	return mock.ListTriggersFunc(contextMoqParam)
}

// ListTriggersCalls gets all the calls that were made to ListTriggers.
// Check the length with:
//     len(mockedFlow.ListTriggersCalls())
func (mock *FlowMock) ListTriggersCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockListTriggers.RLock()
	calls = mock.calls.ListTriggers
	mock.lockListTriggers.RUnlock()
	return calls
}
